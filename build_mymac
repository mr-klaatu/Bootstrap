#!/bin/zsh
# Script to intall useful OSX Options and Utilities to create MAC Development Environment
#

#############
# TODO
#############
# TODO 1. Create functons for each area of fuctionality so the script can be called to do a single task for example rebuild the symlinks.
# TODO 2. Place all the lists in an external file so the script need not be edited to change things.

#############
# Functions
#############
# Set the colours you can use
black='\033[0;30m'
white='\033[0;37m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
magenta='\033[0;35m'
cyan='\033[0;36m'

# Resets the style
reset=`tput sgr0`

logger() {
	# Color-echo. 
	# arg $1 = message
	# arg $2 = Color

	if [ -z "$1" ]; then echo ""; return; fi
	if [ -z "$2" ]; then colour=${green} prefix="-?-"; fi
	if [ "$2" = "E" ]; then colour=${red} prefix="-E-"; fi
	if [ "$2" = "W" ]; then colour=${yellow} prefix="-W-"; fi
	if [ "$2" = "I" ]; then colour=${green} prefix="-I-"; fi
	if [ "$2" = "Q" ]; then colour=${cyan} prefix="-I-"; fi
	if [ "$2" = "N" ]; then colour=${magenta} prefix="-I-"; fi

	echo -e "${colour}${prefix} ${1}${reset}"
	return
}

setup_symlinks() {
	logger "Installing symlinks to DOT files" I

	# This is the root path known as the DEVENV link...
	ln -sf ${HOME}/Documents/Developer ${HOME}/Developer
	
	# link all the DOTFILES to the home directory...
	for file in "${DOTFILES[@]}"
	do
		if [[ -L ${HOME}/.${file%%.*} ]]; then
			logger "Removing old link ${HOME}/.${file%%.*}" W
			unlink ${HOME}/.${file%%.*}
		fi
		if [[ -L ${HOME}/.${file%%.*} ]]; then
			logger "Removing old file ${HOME}/.${file%%.*}" W
			rm -f ${HOME}/.${file%%.*}
		fi
		logger "Creating ${HOME}/.${file%%.*} linked to to ${BOOTENV}/${file}" I
		ln -sf "${BOOTENV}/${file}" "${HOME}/.${file%%.*}" 
	done
}

trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

show_host_status() {
	logger "----------------------------------------------------------------" I
	logger "This machine is $(/usr/bin/uname -n), Running on $Architecture Architecture" I
	logger "Current default SHELL is $(which zsh) at the version of $(zsh --version)" I
	logger "The current user is ${USER} and is located in ${PWD}" I
	if [[ -z "${HOMEBREW_ROOT}" ]]; then  # Check for the homebrew root env...
		# We are NOT running an enhanced Homebrew Environment... 
		logger "This machine is currently running a standard OSX environment." I
	else
		if [ -d ${HOMEBREW_ROOT}/bin ]; then   # Check for the homebrew bin directory...
			# We are running an enhanced Homebrew Environment... 
			logger "This machine is currently running an enhanced HOMEBREW environment." I
		else
			# We are NOT running an enhanced Homebrew Environment... 
			logger "This machine is currently running a standard OSX environment." I
		fi
	fi	
	logger "----------------------------------------------------------------" I
}

check_devenv_link () {
	logger "Checking status of the DEVENV link" I
	LINKSTATUS=0
	if [ -L ${DEVENV} ] ; then
	if [ -e ${DEVENV} ] ; then
		logger "The DEVENV link is set up correctly" I
		LINKSTATUS=1
	else
		logger "The DEVENV link is broken" E
		fi
	elif [ -e ${DEVENV} ] ; then
	logger "The DEVENV link is set up as a physical folder" W
	else
	logger "The DEVENV link is missing" E
	fi
	if [[ ${LINKSTATUS} == 0 ]]
	then
		logger "There was a problem with the DEVENV Link - Re-running setup_symlinks" W
		setup_symlinks
	fi
}

install_commandline_tools() {
	
#Install Mac Xcode Command Line tools
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	#... is correctly installed
	#
	logger "Commandline tools have been installed..." I
else
   	#... isn't correctly installed
	#
	logger "First install commandline tools" I
	xcode-select â€”-install
fi
}

install_ohmyzsh_and_plugings() {
	logger "Delete old OhMyZsh files" I
	if [ -f ${HOME}/.zshrc ]; then
		/bin/rm -f ${HOME}/.zshrc
	fi
	if [ -d ${HOME}/.oh-my-zsh ]; then
		/bin/rm -rf ${HOME}/.oh-my-zsh
	fi

	logger "Now install OhMyZsh" I
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

	logger "Now install OhMyZsh auto-suggestions plugin" I
	echo $sudoPW | sudo -S git clone https://github.com/zsh-users/zsh-autosuggestions ${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions
	if [ ! -d ${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]; then
	    logger "Failed to install zsh-autosuggestions" E
	else
	    logger "Installed zsh-autosuggestions" I
	fi

	logger "Now install OhMyZsh zsh-syntax-highlighting plugin" I
	echo $sudoPW | sudo -S git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
	if [ ! -d ${HOME}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]; then
	    logger "Failed to install zsh-syntax-highlighting" E
	else
	    logger "Installed zsh-syntax-highlighting" I
	fi

	logger "Now install OhMyZsh zsh-completions plugin" I
	echo $sudoPW | sudo -S git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions
	if [ ! -d ${HOME}/.oh-my-zsh/custom/plugins/zsh-completions ]; then
	    logger "Failed to install zsh-completions" E
	else
	    logger "Installed zsh-completions" I
	fi

	logger "ohmyzsh has been installed..." I
}

#############
# INITIALISE
#############

# date for this backup 
BCKDATE=`date +%Y%m%d%H%M`

# list of all dotfiles in use 
DOTFILES=('brewrc.sh' 'gitconfig.sh' 'gorc.sh' 'osxrc.sh' 'vimrc.sh' 'zshrc.sh' 'aliasrc.sh')

# Add environment settings for HOMEBREW
if [ `/usr/bin/uname -p | /usr/bin/grep -i arm` ]; then
	logger "Setting build environment to ARM" I
	export Architecture=Arm
	export HOMEBREW_ROOT=/opt/homebrew
else
	logger "Setting build environment to INTEL" I
	export Architecture=Intel
	export HOMEBREW_ROOT=/usr/local
fi

# First determine the current directory, this script can only be run form ${HOME}/Developer/Bootstrap.
#
CURR_PATH=`pwd`
NEED_PATH=`echo ${HOME}/Developer/Bootstrap`

if [[ $CURR_PATH != $NEED_PATH ]]; then
	logger "ERROR This script must be run from ${HOME}/Developer/Bootstrap" E
	exit 1
fi

# Check that the sym-link from the cloud based Developer folder is in place
#
check_devenv_link

logger
logger "###############################################" N
logger "#        DO NOT RUN THIS SCRIPT BLINDLY       #" N
logger "#         YOU'LL PROBABLY REGRET IT...        #" N
logger "#                                             #" N
logger "#              READ IT THOROUGHLY             #" N
logger "#         AND EDIT TO SUIT YOUR NEEDS         #" N
logger "###############################################" N
logger

logger "Have you read through the script you're about to run and " Q
logger "understood that it will make changes to your computer? (y/n)" Q
read "reply?Continue? (y/n) "
if [[ "$reply" =~ ^[nN]$ ]]; then
  # Check if we're continuing and output a message if not
  logger "Please go read the script, it only takes a few minutes" I
  exit
fi

show_host_status

install_commandline_tools

#
# Promt user and find out if this script needs to delete all the Mac customisation ?
#
logger "some commands need SUDO access, please enter that password now" Q
read "sudoPW?Enter Password for sudo: "

logger "Delete old installations of software like zsh, ohmyzsh, homebrew etc? (y/n)" Q
read "reply?Delete? (y/n) "
if [[ "$reply" =~ ^[yY]$ ]]; then

	logger "Here we go..." I

	logger "Deleting HomeBrew Installation" I
	if [ ! -d ${HOMEBREW_ROOT} ]; then
		logger "Brew is not installed" W
	else
		logger "Brew being uninstalled" I
		echo $sudoPW | sudo -S /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)"
		if [ -d ${HOMEBREW_ROOT} ]; then
			logger "Deleting any remaining Homebrew directories" I
			echo $sudoPW | sudo -S /bin/rm -rf ${HOMEBREW_ROOT}
		fi
	fi

	logger "Deleting OhMyZSH Installation" I
 	if [ -d ${HOME}/.oh-my-zsh ]; then
		logger "OhMyZSH is being uninstalled" I
		echo $sudoPW | sudo -S /bin/rm -rf ${HOME}/.oh-my-zsh
		/bin/rm -rf ${HOME}/.zcompdump*
	else
		logger "OhMyZSH is not installed" W
	fi

	logger "deleting non-standard symlinks to runtime files" I
	if [[ -L ${HOME}/.brewrc ]]; then
		unlink ${HOME}/.brewrc
	fi	
	if [[ -L ${HOME}/.vimrcrc ]]; then
		unlink ${HOME}/.vimrc
	fi	
	#for file in "${DOTFILES[@]}"; do
	#	if [[ -L ${HOME}/.${file%%.*} ]]; then
	#		logger "Removing old link ${HOME}/.${file%%.*}" W
	#		unlink ${HOME}/.${file%%.*}
	#	fi
	#done

	logger "Resetting shell back to Mac Supplied version of ZSH" I
	echo $sudoPW | sudo -S chsh -s /bin/zsh ${USER}
	
	#logger "Removing the Brew version of .zshrc" I
	#if [[ -L ${HOME}/.zshrc ]]; then
	#	/bin/rm ${HOME}/.zshrc
	#fi

	setup_symlinks

	#logger "Installing the .zshrc link" I
	#ln -sf "${BOOTENV}/zshrc.sh" "${HOME}/.zshrc" 

	logger "Removingn non-standard symlinks to runtime files" I
	if [[ -L ${HOME}/.brewrc ]]; then
		unlink ${HOME}/.brewrc
	fi

	source ${HOME}/.zshrc

    show_host_status

	logger "Complete" I
	
fi

logger
logger "###############################################" N
logger "#        You have restored the system to      #" N
logger "#              standard Apple OSX             #" N
logger "###############################################" N
logger

logger "You can Exit now or Continue to install HomeBrew etc" Q
read "reply?Continue? (y/n) "
if [[ "$reply" =~ ^[nN]$ ]]; then
  # Check if we're continuing and output a message if not
  logger "Start the script again to install the Homebrew Environment" I
  logger "Please exit this shell and start a new one to see the effect of your actions" I
  exit
fi

logger "We are about to install HomeBrew." I

#Install Homebrew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

#Validate HomeBrew Environment
if [ "${Architecture}" = "Arm" ]; then
	echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' > ${BOOTENV}/brewrc.sh
	eval "$(/opt/homebrew/bin/brew shellenv)"  
else
	echo 'eval "$(/usr/local/bin/brew shellenv)"' > ${BOOTENV}/brewrc.sh
	eval "$(/usr/local/bin/brew shellenv)" n
fi
export CPATH=${HOMEBREW_ROOT}/include
export LIBRARY_PATH=${HOMEBREW_ROOT}/lib
#export PATH=${HOMEBREW_ROOT}/bin:${HOMEBREW_ROOT}/sbin:${PATH}

logger "Sourcing the new brewrc.sh file, to make brew work correctly." I
source ${BOOTENV}/brewrc.sh

CASK_INSTALLED="false"
logger "Do you want to install Homebrew CASK facility?" Q
read "reply?Install? (y/n) "
if [[ "$reply" =~ ^[yY]$ ]]; then
    logger "Installing 'cask' and its dependancies." I
	brew install cask
	CASK_INSTALLED="true"
fi

logger "Running 'brew install' to install our other software." I
brewFile=${BOOTENV}/brew.cfg

# The following loop used channel 9 to read the file and directs input for the brew command to read from /dev/null
# this is needed because brew install, tends to mess with stdio and causes the loop to terminate early.

while IFS= read -u 9 application || [ -n "$application" ]; do
	case $application in
		"#"*) 
		   # hash found on line - no action
		;;
		"&"*) 
		   # ampersand found on line - install as a cask item
		   cask_application=`echo ${application} | sed -r 's/^&//'`
           logger "Installing CASK ${cask_application}" I
		   # use xargs to trim the application name and install it...
		   brew install --cask `trim "${cask_application}"` </dev/null
		;;
		*) 
		   if [[ "${application}" = "cask" ]]; then	
		   	    # cask needs to be installed separately.
				logger "Remove 'cask' from the brew.cfg file as this causes problems." E
				if [[ "${CASK_INSTALLED}" = "false" ]];	then
					logger "You will need to install 'cask' manually, when this script completes." W
					logger "Use the command '$ brew install cask'." W
		   		fi
				continue
		   fi
		   logger "Installing ${application}" I
		   # use xargs to trim the application name and install it...
		   brew install `trim "${application}"` </dev/null
        ;;
	esac
done 9< ${brewFile}

logger "Quick tidy up of the brew environment." I
brew cleanup
brew doctor

logger "You can configure git or leave the existing config alone..." Q
read "reply?Configure? (y/n) "
if [[ "$reply" =~ ^[yY]$ ]]; then
	git config --global color.ui true
	git config --global user.name "David Cheetham"
	git config --global user.email "mr_klaatu.com"
	ssh-keygen -t rsa -C "mr_klaatu.com"
fi

#
#install_ohmyzsh_and_plugings

#
echo $sudoPW | sudo -S dscl . -create /Users/$USER UserShell ${HOMEBREW_ROOT}/bin/zsh
#
logger "Shell set to Homebrew Supplied version of ZSH - ${HOMEBREW_ROOT}/bin/zsh" I

logger "Do you want to install a PHP environment and Valet? (y/n)" Q
read "reply?Continue? (y/n) "
if [[ "$reply" =~ ^[yY]$ ]]; then
	#install valet

	brew install php composer 

	composer global require laravel/valet

	valet install

	#Setup Sites
	if [ ! -d ${HOME}/Sites ]; then
		logger "Creating ${HOME}/Sites directory" W
		mkdir ${HOME}/Sites
	else
		logger "${HOME}/Sites directory already exists" I
	fi

	cd ${HOME}/Sites
	valet park
	valet secure laravel

fi

# Create all the symlinks from the dev directory to the home directory.
setup_symlinks

logger "Do you want to setup OSX defaults? (y/n)" Q
read "reply?Continue? (y/n) "
if [[ "$reply" =~ ^[yY]$ ]]; then
	${HOME}/.osxrc
	logger
	logger "${HOME}/.osxrc has been executed. Some changes will require a reboot." I
	logger 
fi

source ${HOME}/.zshrc

show_host_status

logger
logger "###############################################" N
logger "#    You have built a homebrew the system on  #" N
logger "#         your standard Apple OSX             #" N
logger "###############################################" N
logger
exit 0